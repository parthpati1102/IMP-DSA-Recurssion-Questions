class Solution {
public:
    bool check(int start , int end , string &s){
        while(start <= end){
            if(s[start] != s[end]){
                return false;
            }

            start++;
            end--;
        }

        return true;
    }
    void usingRecurssion(int index , string &s , vector<vector<string>> &ans , vector<string> &vec){

        if(index >= s.size()){
            ans.push_back(vec);
            return;
        }
        
        for(int i = index ; i < s.size() ; i++){
           
            if(check(index , i , s)){
                vec.push_back(s.substr(index , i - index + 1));
                usingRecurssion(i + 1 , s , ans , vec);

                vec.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {

        vector<vector<string>> ans;
        vector<string> vec;

        usingRecurssion(0 , s , ans , vec);

        return ans;
    }
};
